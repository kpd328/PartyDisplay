@page "/"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using PartyDisplay.OBS.Lib.Data
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Game Setup</PageTitle>

<h3>Connected to game: <img src="@_game?.Icon" alt="@_game?.Name"/></h3>
<div class="form-group">
    <label>
        Player 1 Name:
        <input @bind="P1Name"/>
    </label>
</div>
<div class="form-group">
    <label>
        Player 2 Name:
        <input @bind="P2Name"/>
    </label>
</div>
<div class="form-group">
    <label>
        Player 3 Name:
        <input @bind="P3Name"/>
    </label>
</div>
<div class="form-group">
    <label>
        Player 4 Name:
        <input @bind="P4Name"/>
    </label>
</div>


@code {
    private HubConnection? _boardHubConnection;
    private HubConnection? _playerHubConnection;
    private Game? _game;
    
    private string? _p1Name;
    private string? P1Name {
        get => _p1Name;
        set {
            _p1Name = value;
            _playerHubConnection?.SendAsync("SetName", 1, _p1Name);
        }
    }
    
    private string? _p2Name;
    private string? P2Name {
        get => _p2Name;
        set {
            _p2Name = value;
            _playerHubConnection?.SendAsync("SetName", 2, _p2Name);
        }
    }
    
    private string? _p3Name;
    private string? P3Name {
        get => _p3Name;
        set {
            _p3Name = value;
            _playerHubConnection?.SendAsync("SetName", 3, _p3Name);
        }
    }
    
    private string? _p4Name;
    private string? P4Name {
        get => _p4Name;
        set {
            _p4Name = value;
            _playerHubConnection?.SendAsync("SetName", 4, _p4Name);
        }
    }
    
    protected override async Task OnInitializedAsync() {
        _boardHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/board"))
            .WithAutomaticReconnect()
            .Build();

        _boardHubConnection.On<Game>("GetGame", (game) => {
            _game = game;
            InvokeAsync(StateHasChanged);
        });
        
        await _boardHubConnection.StartAsync();

        _playerHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/player"))
            .WithAutomaticReconnect()
            .Build();
        
        _playerHubConnection.On<byte, string>("GetName", (player, name) => {
            switch (player) {
                case 1:
                    _p1Name = name;
                    break;
                case 2:
                    _p2Name = name;
                    break;
                case 3:
                    _p3Name = name;
                    break;
                case 4:
                    _p4Name = name;
                    break;
            }

            InvokeAsync(StateHasChanged);
        });

        await _playerHubConnection.StartAsync();
    }
    
    public async ValueTask DisposeAsync() {
        if (_boardHubConnection is not null) {
            await _boardHubConnection.DisposeAsync();
        }

        if (_playerHubConnection is not null) {
            await _playerHubConnection.DisposeAsync();
        }
    }

}
