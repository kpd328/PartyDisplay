@page "/"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Game Setup</PageTitle>

<h3>Connected to game: <img src="@_gameImg" alt="@GameName"/></h3>
<div class="form-group">
    <label>
        Player 1 Name:
        <input @bind="_p1Name"/>
    </label>
</div>
<div class="form-group">
    <label>
        Player 2 Name:
        <input @bind="_p2Name"/>
    </label>
</div>
<div class="form-group">
    <label>
        Player 3 Name:
        <input @bind="_p3Name"/>
    </label>
</div>
<div class="form-group">
    <label>
        Player 4 Name:
        <input @bind="_p4Name"/>
    </label>
</div>
<button @onclick="Update" disabled="@(!IsConnected)">Update</button>


@code {
    private HubConnection? _boardHubConnection;
    private HubConnection? _playerHubConnection;
    private string? _game;
    private string? _gameImg;
    private string? _p1Name;
    private string? _p2Name;
    private string? _p3Name;
    private string? _p4Name;
    
    private string? GameName => _game switch {
        "mp2" => "Mario Party 2",
        "mp4" => "Mario Party 4",
        "mp5" => "Mario Party 5",
        "mp6" => "Mario Party 6",
        "mp7" => "Mario Party 7",
        "mp8" => "Mario Party 8",
        _ => _game
    };

    protected override async Task OnInitializedAsync() {
        _boardHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/board"))
            .WithAutomaticReconnect()
            .Build();

        _boardHubConnection.On<string>("SetGame", (game) => {
            _game = game;
            _gameImg = GameName == game ? string.Empty : $"/img/title/{_game}.png";
            InvokeAsync(StateHasChanged);
        });
        
        await _boardHubConnection.StartAsync();

        _playerHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/player"))
            .WithAutomaticReconnect()
            .Build();
        
        _playerHubConnection.On<byte, string>("SetName", (player, name) => {
            switch (player) {
                case 1:
                    _p1Name = name;
                    break;
                case 2:
                    _p2Name = name;
                    break;
                case 3:
                    _p3Name = name;
                    break;
                case 4:
                    _p4Name = name;
                    break;
            }

            InvokeAsync(StateHasChanged);
        });

        await _playerHubConnection.StartAsync();
    }

    private async Task Update() {
        if (_playerHubConnection is not null) {
            await _playerHubConnection.SendAsync("SetName", 1, _p1Name);
            await _playerHubConnection.SendAsync("SetName", 2, _p2Name);
            await _playerHubConnection.SendAsync("SetName", 3, _p3Name);
            await _playerHubConnection.SendAsync("SetName", 4, _p4Name);
        }
    }

    private bool IsConnected => IsBoardConnected && IsPlayerConnected;
    private bool IsBoardConnected => _boardHubConnection?.State == HubConnectionState.Connected;
    private bool IsPlayerConnected => _playerHubConnection?.State == HubConnectionState.Connected;
    
    public async ValueTask DisposeAsync() {
        if (_boardHubConnection is not null) {
            await _boardHubConnection.DisposeAsync();
        }

        if (_playerHubConnection is not null) {
            await _playerHubConnection.DisposeAsync();
        }
    }

}
