@page "/admin"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using PartyDisplay.Lib.Data
@using PartyDisplay.Lib.Data.Store
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Admin Override</PageTitle>
<h3>Board</h3>
<div class="form-group">
    <label>
        Game Override:
        <select @bind:get="Game?.Code" @bind:set="SetGame">
            <option value=""></option>
            @foreach (var g in Games.Templates) {
                <option value="@g.Code">@g.Name</option>
            }
        </select>
    </label>
    @if (Game is not null) {
        <label>
            Region:
            <select @bind="GameRegion">
                <option value=""></option>
                @foreach (var r in Game.AvailableRegions) {
                    <option value="@r">@(r.ToString().Replace("_", "-"))</option>
                }
            </select>
        </label>
    }
</div>
<div class="form-group">
    <label>
        Board:
        <select @bind:get="Board?.Name" @bind:set="SetBoard">
            <option value=""></option>
            @foreach (var b in _boards) {
                <option value="@b.Name">@b.Name</option>
            }
        </select>
    </label>
    <label>
        Image Type:
        <select @bind="ImageClass">
            <option value=""></option>
            @foreach (BoardImageClass img in Enum.GetValues(typeof(BoardImageClass))) {
                <option value="@img">@img</option>
            }
        </select>
    </label>
</div>
<div class="form-group">
    <label>
        Turn:
        <input type="number" @bind="TurnCount"/>
    </label>
</div>
<div class="form-group">
    <label>
        Turn Limit:
        <input type="number" @bind="TurnLimit"/>
    </label>
</div>
<br/>

@{
    var i = 1;
    foreach (var player in _players) {
        <h3>Player @i</h3>
        <div class="form-group">
            <label>
                Name:
                <input type="text" @bind:get="player.Name" @bind:set="n => SetPlayerName(player, n)"/>
            </label>
        </div>
        <div class="form-group">
            <label>
                Character:
                <select @bind:get="player.Character?.Name" @bind:set="c => SetCharacter(player, c)">
                    <option value=""></option>
                    @foreach (var c in _characters) {
                        <option value="@c.Name">@c.Name</option>
                    }
                </select>
            </label>
        </div>
        <div class="form-group">
            <label>
                Star Count:
                <input type="number" @bind:get="player.StarCount" @bind:set="c => SetStarCount(player, c)"/>
            </label>
        </div>
        <div class="form-group">
            <label>
                Coin Count:
                <input type="number" @bind:get="player.CoinCount" @bind:set="c => SetCoinCount(player, c)"/>
            </label>
        </div>
        <div class="form-group">
            <label>
                Ranking:
                <select @bind:get="player.Ranking" @bind:set="r => SetRank(player, r)">
                    <option value=""></option>
                    @foreach (Ranking rank in Enum.GetValues(typeof(Ranking))) {
                        <option value="@rank">@rank</option>
                    }
                </select>
            </label>
        </div>
        <div class="form-group">
            <label>
                Landing Space:
                <select @bind:get="player.LandingColor" @bind:set="s => SetSpace(player, s)">
                    <option value=""></option>
                    @foreach (SpaceColor space in Enum.GetValues(typeof(SpaceColor))) {
                        if(Game is not null && space == SpaceColor.Pink && Game.Code is not ("mp6" or "mp7")) continue;
                        <option value="@space">@space</option>
                    }
                </select>
            </label>
        </div>
        @if (_statuses.Length > 0) {
            <div class="form-group">
                <label>
                    Status:
                    <select @bind:get="player.Status?.Name" @bind:set="s => SetStatus(player, s)">
                        <option value=""></option>
                        @foreach (var status in _statuses) {
                            <option value="@status.Name">@status.Name</option>
                        }
                    </select>
                </label>
            </div>
        }
        <div class="form-group">
            <label>
                Item(s):
                @{
                    int j = 0;
                    foreach (var slot in player.Items) {
                        int slotIndex = j;
                        <select @bind:get="slot?.Name" @bind:set="x => SetItem(player, slotIndex, x)">
                            <option value=""></option>
                            @foreach (var item in _items.Where(x => x is not null)) {
                                <option value="@item?.Name">@item?.Name</option>
                            }
                        </select>
                        j++;
                    }
                }
            </label>
        </div>
        @foreach (var star in player.BonusStars ?? []) {
            <div class="form-goup">
                <label>
                    @star.Name
                    <input type="number" @bind:get="@star.Count" @bind:set="c => SetBonusStar(player, star, c)"/>
                </label>
            </div>
        }

        <br/>
        i++;
    }
}

@code {
    private HubConnection? _boardHubConnection;
    private HubConnection? _playerHubConnection;

    private readonly IPlayer<Item>[] _players = [
        new PartyDisplay.Lib.Xfer.Player(),
        new PartyDisplay.Lib.Xfer.Player(),
        new PartyDisplay.Lib.Xfer.Player(),
        new PartyDisplay.Lib.Xfer.Player()
    ];

    private Character[] _characters = [];
    private Item?[] _items = [];
    private Status[] _statuses = [];
    private PartyDisplay.Lib.Data.Board[] _boards = [];

    private Game? _game;
    private Game? Game {
        get => _game;
        set {
            _game = value;
            _boardHubConnection?.SendAsync("SetGame", _game);
            switch (_game?.Code) {
                case "mp2":
                    _characters = Mp2.Characters;
                    _items = Mp2.Items;
                    _statuses = Mp2.Statuses;
                    _boards = Mp2.Boards;
                    
                    _players[0].BonusStars = Mp2.BonusStars;
                    _players[1].BonusStars = Mp2.BonusStars;
                    _players[2].BonusStars = Mp2.BonusStars;
                    _players[3].BonusStars = Mp2.BonusStars;
                    _players[0].Items = new Item[1];
                    _players[1].Items = new Item[1];
                    _players[2].Items = new Item[1];
                    _players[3].Items = new Item[1];

                    _playerHubConnection?.SendAsync("InitItems", 1);
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp2.BonusStars);
                    break;
                case "mp4":
                    _characters = Mp4.Characters;
                    _items = Mp4.Items;
                    _statuses = Mp4.Statuses;
                    _boards = Mp4.Boards;
                    
                    _players[0].BonusStars = Mp4.BonusStars;
                    _players[1].BonusStars = Mp4.BonusStars;
                    _players[2].BonusStars = Mp4.BonusStars;
                    _players[3].BonusStars = Mp4.BonusStars;
                    _players[0].Items = new Item[3];
                    _players[1].Items = new Item[3];
                    _players[2].Items = new Item[3];
                    _players[3].Items = new Item[3];
                    
                    _playerHubConnection?.SendAsync("InitItems", 3);
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp4.BonusStars);
                    break;
                case "mp5":
                    _characters = Mp5.Characters;
                    _items = Mp5.Items;
                    _statuses = Mp5.Statuses;
                    _boards = Mp5.Boards;
                    
                    _players[0].BonusStars = Mp5.BonusStars;
                    _players[1].BonusStars = Mp5.BonusStars;
                    _players[2].BonusStars = Mp5.BonusStars;
                    _players[3].BonusStars = Mp5.BonusStars;
                    _players[0].Items = new Item[3];
                    _players[1].Items = new Item[3];
                    _players[2].Items = new Item[3];
                    _players[3].Items = new Item[3];
                    
                    _playerHubConnection?.SendAsync("InitItems", 3);
                    
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp5.BonusStars);
                    break;
                case "mp6":
                    _characters = Mp6.Characters;
                    _items = Mp6.Items;
                    _statuses = Mp6.Statuses;
                    _boards = Mp6.Boards;
                    
                    _players[1].BonusStars = Mp6.BonusStars;
                    _players[2].BonusStars = Mp6.BonusStars;
                    _players[3].BonusStars = Mp6.BonusStars;
                    _players[0].BonusStars = Mp6.BonusStars;
                    _players[0].Items = new Item[3];
                    _players[1].Items = new Item[3];
                    _players[2].Items = new Item[3];
                    _players[3].Items = new Item[3];
                    
                    _playerHubConnection?.SendAsync("InitItems", 3);
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp6.BonusStars);
                    break;
                case "mp7":
                    _characters = Mp7.Characters;
                    _items = Mp7.Items;
                    _statuses = Mp7.Statuses;
                    _boards = Mp7.Boards;
                    
                    _players[1].BonusStars = Mp7.BonusStars;
                    _players[2].BonusStars = Mp7.BonusStars;
                    _players[3].BonusStars = Mp7.BonusStars;
                    _players[0].BonusStars = Mp7.BonusStars;
                    _players[0].Items = new Item[3];
                    _players[1].Items = new Item[3];
                    _players[2].Items = new Item[3];
                    _players[3].Items = new Item[3];
                    
                    _playerHubConnection?.SendAsync("InitItems", 3);
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp7.BonusStars);
                    break;
                case "mp8":
                    _characters = Mp8.Characters;
                    _items = Mp8.Items;
                    _statuses = Mp8.Statuses;
                    _boards = Mp8.Boards;
                    
                    _players[1].BonusStars = Mp8.BonusStars;
                    _players[2].BonusStars = Mp8.BonusStars;
                    _players[3].BonusStars = Mp8.BonusStars;
                    _players[0].BonusStars = Mp8.BonusStars;
                    _players[0].Items = new Item[3];
                    _players[1].Items = new Item[3];
                    _players[2].Items = new Item[3];
                    _players[3].Items = new Item[3];
                    
                    _playerHubConnection?.SendAsync("InitItems", 3);
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp8.BonusStars);
                    break;
            }
        }
    }

    private Region GameRegion {
        get => Game.Region;
        set {
            Game.Region = value;
            _boardHubConnection?.SendAsync("SetGame", _game);
        }
    }
    
    private PartyDisplay.Lib.Data.Board? _board;
    private PartyDisplay.Lib.Data.Board? Board {
        get => _board;
        set {
            _board = value;
            _boardHubConnection?.SendAsync("SetBoard", _board);
        }
    }
    
    private short _turnCount;
    private short TurnCount {
        get => _turnCount;
        set {
            _turnCount = value;
            _boardHubConnection?.SendAsync("SetTurnCurrent", _turnCount);
        }
    }
    
    private short _turnLimit;
    private short TurnLimit {
        get => _turnLimit;
        set {
            _turnLimit = value;
            _boardHubConnection?.SendAsync("SetTurnLimit", _turnLimit);
        }
    }

    private BoardImageClass? _imageClass;
    private BoardImageClass? ImageClass {
        get => _imageClass;
        set {
            _imageClass = value;
            _boardHubConnection?.SendAsync("SetBoardImageClass", (_imageClass ?? BoardImageClass.Logo));
        }
    }

    protected override async Task OnInitializedAsync() {
        _boardHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/board"))
            .WithAutomaticReconnect()
            .Build();

        _boardHubConnection.On<Game>("GetGame", (game) => {
            Game = game;
            InvokeAsync(StateHasChanged);
        });

        await _boardHubConnection.StartAsync();

        _playerHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/player"))
            .WithAutomaticReconnect()
            .Build();

        _playerHubConnection.On<byte, string>("GetName", (player, name) => {
            _players[player].Name = name;
            InvokeAsync(StateHasChanged);
        });

        await _playerHubConnection.StartAsync();
    }

    private void SetGame(string? game) => Game = game is null ? null : Games.Templates.Single(g => g.Code == game);
    
    private void SetBoard(string? board) => Board = board is null ? null : _boards.Single(b => b.Name == board);

    private void SetPlayerName(IPlayer<Item> player, string? name) {
        player.Name = name ?? string.Empty;
        _playerHubConnection?.SendAsync("SetName", Array.IndexOf(_players, player) + 1, player.Name);
    }
    
    private void SetCharacter(IPlayer<Item> player, string? character) {
        player.Character = character is null ? null! : _characters.Single(x => x.Name == character);
        _playerHubConnection?.SendAsync("UpdateCharacter", Array.IndexOf(_players, player) + 1, player.Character);
    }

    private void SetStarCount(IPlayer<Item> player, short count) {
        player.StarCount = count;
        _playerHubConnection?.SendAsync("UpdateStarCount", Array.IndexOf(_players, player) + 1, player.StarCount);
    }
    
    private void SetCoinCount(IPlayer<Item> player, short count) {
        player.CoinCount = count;
        _playerHubConnection?.SendAsync("UpdateCoinCount", Array.IndexOf(_players, player) + 1, player.CoinCount);
    }

    private void SetRank(IPlayer<Item> player, Ranking rank) {
        player.Ranking = rank;
        _playerHubConnection?.SendAsync("UpdateRank", Array.IndexOf(_players, player) + 1, player.Ranking);
    }

    private void SetSpace(IPlayer<Item> player, SpaceColor? space) {
        player.LandingColor = space;
        _playerHubConnection?.SendAsync("UpdateSpace", Array.IndexOf(_players, player) + 1, player.LandingColor);
    }
    
    private void SetStatus(IPlayer<Item> player, string? selected) {
        player.Status = selected is null or "" ? null : _statuses.Single(x => x.Name == selected);
        _playerHubConnection?.SendAsync("UpdateStatus", Array.IndexOf(_players, player) + 1, player.Status);
    }
    
    private void SetItem(IPlayer<Item> player, int slot, string? selected) {
        player.Items[slot] = selected is null or "" ? null : _items.Single(x => x?.Name == selected);
        _playerHubConnection?.SendAsync("UpdateItem", Array.IndexOf(_players, player) + 1, slot, player.Items[slot]);

    }

    private void SetBonusStar(IPlayer<Item> player, BonusStar star, short count) {
        star.Count = count;
        _playerHubConnection?.SendAsync("UpdateBonusStar", Array.IndexOf(_players, player) + 1, star);
    }
    
    public async ValueTask DisposeAsync() {
        if (_boardHubConnection is not null) {
            await _boardHubConnection.DisposeAsync();
        }

        if (_playerHubConnection is not null) {
            await _playerHubConnection.DisposeAsync();
        }
    }

}