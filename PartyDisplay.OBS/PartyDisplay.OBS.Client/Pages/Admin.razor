@page "/admin"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using PartyDisplay.OBS.Lib.Data
@using PartyDisplay.OBS.Lib.Data.Store
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Admin Override</PageTitle>
<h3>Board</h3>
<div class="form-group">
    <label>
        Game Override:
        <select @bind="GameName">
            <option value=""></option>
            @* TODO: Replace this with an actual list of available games from the server. *@
            @for (var g = 2; g <= 8; g++) {
                @if (g == 3) continue;
                <option value="@($"mp{g}")">Mario Party @g</option>
            }
        </select>
    </label>
    <label>
        Region:
        @* TODO: Make this actually matter *@
        <select @bind="_gameRegion">
            <option value="NTSC">NTSC</option>
            <option value="PAL">PAL</option>
            <option value="NTSC-J">NTSC-J</option>
        </select>
    </label>
</div>
<div class="form-group">
    <label>
        Board:
        <select @bind:get="Board?.Name" @bind:set="x => SetBoard(x)">
            <option value=""></option>
            @foreach (var b in _boards) {
                <option value="@b.Name">@b.Name</option>
            }
        </select>
    </label>
    <label>
        Image Type:
        <select @bind="ImageClass">
            <option value=""></option>
            @foreach (BoardImageClass img in Enum.GetValues(typeof(BoardImageClass))) {
                <option value="@img">@img</option>
            }
        </select>
    </label>
</div>
<div class="form-group">
    <label>
        Turn:
        <input type="number" @bind="TurnCount"/>
    </label>
</div>
<div class="form-group">
    <label>
        Turn Limit:
        <input type="number" @bind="TurnLimit"/>
    </label>
</div>
<br/>

@{
    var i = 1;
    foreach (var player in _players) {
        <h3>Player @i</h3>
        <div class="form-group">
            <label>
                Name:
                <input type="text" @bind="player.Name"/>
            </label>
        </div>
        <div class="form-group">
            <label>
                Character:
                <select @bind:get="player.Character?.Name" @bind:set="x => SetCharacter(player, x)">
                    <option value=""></option>
                    @foreach (var c in _characters) {
                        <option value="@c.Name">@c.Name</option>
                    }
                </select>
            </label>
        </div>
        <div class="form-group">
            <label>
                Star Count:
                <input type="number" @bind="player.StarCount"/>
            </label>
        </div>
        <div class="form-group">
            <label>
                Coin Count:
                <input type="number" @bind="player.CoinCount"/>
            </label>
        </div>
        <div class="form-group">
            <label>
                Ranking:
                <select @bind="player.Ranking">
                    <option value=""></option>
                    @foreach (Ranking rank in Enum.GetValues(typeof(Ranking))) {
                        <option value="@rank">@rank</option>
                    }
                </select>
            </label>
        </div>
        <div class="form-group">
            <label>
                Landing Space:
                <select @bind="player.LandingColor">
                    <option value=""></option>
                    @foreach (SpaceColor space in Enum.GetValues(typeof(SpaceColor))) {
                        if(space == SpaceColor.Pink && (_gameName != "mp6" || _gameName != "mp7")) continue;
                        <option value="@space">@space</option>
                    }
                </select>
            </label>
        </div>
        @if (_statuses.Length > 0) {
            <div class="form-group">
                <label>
                    Status:
                    <select @bind:get="player.Status?.Name" @bind:set="x => SetStatus(player, x)">
                        <option value=""></option>
                        @foreach (var status in _statuses) {
                            <option value="@status.Name">@status.Name</option>
                        }
                    </select>
                </label>
            </div>
        }
        <div class="form-group">
            <label>
                Item(s):
                @{
                    int j = 0;
                    foreach (var slot in player.Items) {
                        int slotIndex = j;
                        <select @bind:get="slot?.Name" @bind:set="x => SetItem(player, slotIndex, x)">
                            <option value=""></option>
                            @foreach (var item in _items.Where(x => x is not null)) {
                                <option value="@item.Name">@item.Name</option>
                            }
                        </select>
                        j++;
                    }
                }
            </label>
        </div>
        @foreach (var star in player.BonusStars ?? []) {
            <div class="form-goup">
                <label>
                    @star.Name
                    <input type="number" @bind="@star.Count"/>
                </label>
            </div>
        }

        <button @onclick="@(_ => UpdatePlayer(player))" disabled="@(!IsPlayerConnected)">Update Player @i</button>
        <br/>
        i++;
    }
}

@code {
    private HubConnection? _boardHubConnection;
    private HubConnection? _playerHubConnection;
    private string? _gameRegion;

    private readonly IPlayer<ICharacter, IItem>[] _players = [
        new Lib.Xfer.Player(),
        new Lib.Xfer.Player(),
        new Lib.Xfer.Player(),
        new Lib.Xfer.Player()
    ];

    private ICharacter[] _characters = [];
    private IItem?[] _items = [];
    private Status[] _statuses = [];
    private Lib.Data.Board[] _boards = [];

    private string? _gameName;
    private string? GameName {
        get => _gameName;
        set {
            _gameName = value;
            _boardHubConnection?.SendAsync("SetGame", GameName);
            switch (_gameName) {
                case "mp2":
                    _characters = Mp2.Characters;
                    _items = Mp2.Items;
                    _statuses = Mp2.Statuses;
                    _boards = Mp2.Boards;
                    
                    _players[0].BonusStars = Mp2.BonusStars;
                    _players[1].BonusStars = Mp2.BonusStars;
                    _players[2].BonusStars = Mp2.BonusStars;
                    _players[3].BonusStars = Mp2.BonusStars;
                    _players[0].Items = new IItem[1];
                    _players[1].Items = new IItem[1];
                    _players[2].Items = new IItem[1];
                    _players[3].Items = new IItem[1];

                    _playerHubConnection?.SendAsync("InitItems", 1);
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp2.BonusStars);
                    break;
                case "mp4":
                    _characters = Mp4.Characters;
                    _items = Mp4.Items;
                    _statuses = Mp4.Statuses;
                    _boards = Mp4.Boards;
                    
                    _players[0].BonusStars = Mp4.BonusStars;
                    _players[1].BonusStars = Mp4.BonusStars;
                    _players[2].BonusStars = Mp4.BonusStars;
                    _players[3].BonusStars = Mp4.BonusStars;
                    _players[0].Items = new IItem[3];
                    _players[1].Items = new IItem[3];
                    _players[2].Items = new IItem[3];
                    _players[3].Items = new IItem[3];
                    
                    _playerHubConnection?.SendAsync("InitItems", 3);
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp4.BonusStars);
                    break;
                case "mp5":
                    _characters = Mp5.Characters;
                    _items = Mp5.Items;
                    _statuses = Mp5.Statuses;
                    _boards = Mp5.Boards;
                    
                    _players[0].BonusStars = Mp5.BonusStars;
                    _players[1].BonusStars = Mp5.BonusStars;
                    _players[2].BonusStars = Mp5.BonusStars;
                    _players[3].BonusStars = Mp5.BonusStars;
                    _players[0].Items = new IItem[3];
                    _players[1].Items = new IItem[3];
                    _players[2].Items = new IItem[3];
                    _players[3].Items = new IItem[3];
                    
                    _playerHubConnection?.SendAsync("InitItems", 3);
                    
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp5.BonusStars);
                    break;
                case "mp6":
                    _characters = Mp6.Characters;
                    _items = Mp6.Items;
                    _statuses = Mp6.Statuses;
                    _boards = Mp6.Boards;
                    
                    _players[1].BonusStars = Mp6.BonusStars;
                    _players[2].BonusStars = Mp6.BonusStars;
                    _players[3].BonusStars = Mp6.BonusStars;
                    _players[0].BonusStars = Mp6.BonusStars;
                    _players[0].Items = new IItem[3];
                    _players[1].Items = new IItem[3];
                    _players[2].Items = new IItem[3];
                    _players[3].Items = new IItem[3];
                    
                    _playerHubConnection?.SendAsync("InitItems", 3);
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp6.BonusStars);
                    break;
                case "mp7":
                    _characters = Mp7.Characters;
                    _items = Mp7.Items;
                    _statuses = Mp7.Statuses;
                    _boards = Mp7.Boards;
                    
                    _players[1].BonusStars = Mp7.BonusStars;
                    _players[2].BonusStars = Mp7.BonusStars;
                    _players[3].BonusStars = Mp7.BonusStars;
                    _players[0].BonusStars = Mp7.BonusStars;
                    _players[0].Items = new IItem[3];
                    _players[1].Items = new IItem[3];
                    _players[2].Items = new IItem[3];
                    _players[3].Items = new IItem[3];
                    
                    _playerHubConnection?.SendAsync("InitItems", 3);
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp7.BonusStars);
                    break;
                case "mp8":
                    _characters = Mp8.Characters;
                    _items = Mp8.Items;
                    _statuses = Mp8.Statuses;
                    _boards = Mp8.Boards;
                    
                    _players[1].BonusStars = Mp8.BonusStars;
                    _players[2].BonusStars = Mp8.BonusStars;
                    _players[3].BonusStars = Mp8.BonusStars;
                    _players[0].BonusStars = Mp8.BonusStars;
                    _players[0].Items = new IItem[3];
                    _players[1].Items = new IItem[3];
                    _players[2].Items = new IItem[3];
                    _players[3].Items = new IItem[3];
                    
                    _playerHubConnection?.SendAsync("InitItems", 3);
                    _playerHubConnection?.SendAsync("InitBonusStars", Mp8.BonusStars);
                    break;
            }
        }
    }
    
    private Lib.Data.Board? _board;
    private Lib.Data.Board? Board {
        get => _board;
        set {
            _board = value;
            _boardHubConnection?.SendAsync("SetBoard", _board);
        }
    }
    
    private short _turnCount;
    private short TurnCount {
        get => _turnCount;
        set {
            _turnCount = value;
            _boardHubConnection?.SendAsync("SetTurnCurrent", _turnCount);
        }
    }
    
    private short _turnLimit;
    private short TurnLimit {
        get => _turnLimit;
        set {
            _turnLimit = value;
            _boardHubConnection?.SendAsync("SetTurnLimit", _turnLimit);
        }
    }

    private BoardImageClass? _imageClass;
    public BoardImageClass? ImageClass {
        get => _imageClass;
        set {
            _imageClass = value;
            _boardHubConnection?.SendAsync("SetBoardImageClass", (_imageClass ?? BoardImageClass.Logo));
        }
    }

    protected override async Task OnInitializedAsync() {
        _boardHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/board"))
            .WithAutomaticReconnect()
            .Build();

        _boardHubConnection.On<string>("GetGame", (game) => {
            GameName = game;
            InvokeAsync(StateHasChanged);
        });

        await _boardHubConnection.StartAsync();

        _playerHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/player"))
            .WithAutomaticReconnect()
            .Build();

        _playerHubConnection.On<byte, string>("GetName", (player, name) => {
            _players[player].Name = name;
            InvokeAsync(StateHasChanged);
        });

        await _playerHubConnection.StartAsync();
    }

    private async Task UpdatePlayer(IPlayer<ICharacter, IItem> p) {
        int i = Array.IndexOf(_players, p) + 1;
        if (_playerHubConnection is not null) {
            await _playerHubConnection.SendAsync("SetName", i, p.Name);
            await _playerHubConnection.SendAsync("UpdateCharacter", i, p.Character);
            await _playerHubConnection.SendAsync("UpdateStarCount", i, p.StarCount);
            await _playerHubConnection.SendAsync("UpdateCoinCount", i, p.CoinCount);
            await _playerHubConnection.SendAsync("UpdateRank", i, p.Ranking);
            await _playerHubConnection.SendAsync("UpdateSpace", i, p.LandingColor);
            await _playerHubConnection.SendAsync("UpdateStatus", i, p.Status);
            await _playerHubConnection.SendAsync("UpdateItems", i, p.Items);
            foreach (var star in p.BonusStars) {
                await _playerHubConnection.SendAsync("UpdateBonusStar", i, star);
            }
        }
    }

    private void SetBoard(string? board) {
        if (board is null) {
            Board = null;
            return;
        }

        Board = _boards.Single(b => b.Name == board);
    }

    private void SetCharacter(IPlayer<ICharacter, IItem> player, string? character) {
        if (character is null) return;
        player.Character = _characters.Single(x => x.Name == character);
    }

    private void SetItem(IPlayer<ICharacter, IItem> player, int slot, string? selected) {
        if (selected is null) {
            player.Items[slot] = null;
            return;
        }

        player.Items[slot] = _items.Single(x => x?.Name == selected);
    }

    private void SetStatus(IPlayer<ICharacter, IItem> player, string? selected) {
        if (selected is null) {
            player.Status = null;
            return;
        }

        player.Status = _statuses.Single(x => x.Name == selected);
    }

    private bool IsBoardConnected => _boardHubConnection?.State == HubConnectionState.Connected;
    private bool IsPlayerConnected => _playerHubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() {
        if (_boardHubConnection is not null) {
            await _boardHubConnection.DisposeAsync();
        }

        if (_playerHubConnection is not null) {
            await _playerHubConnection.DisposeAsync();
        }
    }

}