@page "/board"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Board Info</PageTitle>

<div class="game-frame"><img class="game-img" src="@_gameImg" alt="@GameName"/></div>
<div class="board-frame"><img class="board-img" src="@_boardImg" alt="@_board"/></div>
<p class="turn-count">Turn @_turnCount / @_turnLimit</p>
@if (_game == "mp6" || (_game == "mp2" && _board == "Horror Land")) {
    // TODO: Insert Day/Night Cycle State & Counter
    <p>Insert Day/Night Cycle Here</p>
}
@if (_game == "mp7") {
    // TODO: Insert Bowser Time Counter
    <p>Insert Bowser Time Here</p>
}

@code {
    private HubConnection? _hubConnection;
    private string? _game;
    private string? _gameImg;
    private string? _board;
    private string? _boardImg;
    private short _turnCount = 0;
    private short _turnLimit = 0;
    
    private string? GameName => _game switch {
        "mp2" => "Mario Party 2",
        "mp4" => "Mario Party 4",
        "mp5" => "Mario Party 5",
        "mp6" => "Mario Party 6",
        "mp7" => "Mario Party 7",
        "mp8" => "Mario Party 8",
        _ => _game
    };
    private string? BoardNormalized => _board?.Trim()
        .ToLower()
        .Replace(' ', '_')
        .Replace("\'", "")
        .Replace(".", "")
        .Replace("!", "");

    protected override async Task OnInitializedAsync() {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/board"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("GetGame", (game) => {
            _game = game;
            _gameImg = GameName == game ? "" : $"/img/title/{_game}.png";
            InvokeAsync(StateHasChanged);
        });
        
        _hubConnection.On<string>("GetName", (name) => {
            _board = name;
            _boardImg = _board is null  ? string.Empty : $"/img/board/{_game}.{BoardNormalized}.logo.png";
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<short>("GetTurnCurrent", (turn) => {
            _turnCount = turn;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<short>("GetTurnLimit", (limit) => {
            _turnLimit = limit;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() {
        if (_hubConnection is not null) {
            await _hubConnection.DisposeAsync();
        }
    }
}