@page "/player/{port:int}"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using PartyDisplay.OBS.Lib.Data
@using System.Linq
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Player @Port</PageTitle>
<div class="player-container">
    <div class="landed-space space-@_currentSpace"></div>
    <h1 class="player-name">@_name</h1>
    <div class="rank-container"><img class="rank-img" src="@_rankImg" alt="@_ranking"/></div>
    <img class="character" src="@_character?.Icon" alt="@_character?.Name"/>
    <img class="status" src="@_status?.Icon" alt="@_status?.Name"/>
    <p class="star-count">Stars: @_stars</p>
    <p class="coin-count">Coins: @_coins</p>
    <ul class="item-box">
        @foreach (var item in _items) {
            <li><img class="item-img" src="@item?.Icon" alt="@item?.Name"/></li>
        }
    </ul>
    <ul class="bonus-stars">
        @foreach (var bs in _bonusStars) {
            <li><img class="bonus-star-img" src="@bs.Icon" alt="@bs.Name"/> @bs.Count</li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public int Port { get; set; }

    private HubConnection? _hubConnection;
    private HubConnection? _gameConnection;
    private string? _game;
    private string? _name;
    private short _stars;
    private short _coins;
    private Ranking? _ranking;
    private string? _rankImg;
    private SpaceColor? _currentSpace;
    private ICharacter? _character;
    private Status? _status;
    private IItem?[] _items = [];
    private BonusStar[] _bonusStars = [];

    protected override async Task OnInitializedAsync() {
        if (Port is < 1 or > 4) {
            Navigation.NavigateTo("/Error");
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"/hub/player"))
            .WithAutomaticReconnect()
            .Build();
        
        _hubConnection.On<byte, string>("GetName", (player, name) => {
            if (player != Port) return;
            _name = name;
            InvokeAsync(StateHasChanged);
        });
        
        _hubConnection.On<byte, short>("GetStarCount", (player, count) => {
            if (player != Port) return;
            _stars = count;
            InvokeAsync(StateHasChanged);
        });
        
        _hubConnection.On<byte, short>("GetCoinCount", (player, count) => {
            if (player != Port) return;
            _coins = count;
            InvokeAsync(StateHasChanged);
        });
        
        _hubConnection.On<byte, Ranking>("GetRank", (player, ranking) => {
            if (player != Port) return;
            _ranking = ranking;
            _rankImg = $"/img/ranking/{_game}.{ranking.ToString().ToLower()}.png";
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<byte, SpaceColor?>("GetSpace", (player, color) => {
            if (player != Port) return;
            _currentSpace = color;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<byte, ICharacter>("GetCharacter", (player, character) => {
            if (player != Port) return;
            _character = character;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<byte, Status?>("GetStatus", (player, status) => {
            if (player != Port) return;
            _status = status;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<byte>("GetItemsInit", (size) => {
            _items = new IItem[size];
        });

        _hubConnection.On<byte, IItem?[]>("GetItems", (player, items) => {
            if (player != Port) return;
            _items = items;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<BonusStar[]>("GetBonusStarsInit", (bonusStars) => {
            _bonusStars = bonusStars;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<byte, BonusStar>("GetBonusStar", (player, bonusStar) => {
            if (player != Port) return;
            var toUpdate = _bonusStars.Single(bs => bs.Name == bonusStar.Name);
            toUpdate.Count = bonusStar.Count;
            toUpdate.InLead = bonusStar.InLead;
        });

        await _hubConnection.StartAsync();
        
        _gameConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"/hub/board"))
            .WithAutomaticReconnect()
            .Build();
        
        _gameConnection.On<string>("GetGame", (game) => {
            _game = game;
        });

        await _gameConnection.StartAsync();
    }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() {
        if (_hubConnection is not null) {
            await _hubConnection.DisposeAsync();
        }
    }
}