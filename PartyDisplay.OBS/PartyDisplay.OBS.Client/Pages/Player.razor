@page "/player/{port:int}"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using PartyDisplay.OBS.Lib.Data
@using System.Linq
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Player @Port</PageTitle>

<h1>@_name</h1>
<h2>@_ranking</h2>
<h3>@_character?.Name</h3>

<p>Stars: @_stars</p>
<p>Coins: @_coins</p>
<ul>
    @foreach (var item in _items) {
        <li>@item?.Name</li>
    }
</ul>
<ul>
    @foreach (var bs in _bonusStars) {
        <li>@bs.Name: @bs.Count</li>
    }
</ul>

@code {
    [Parameter]
    public int Port { get; set; }

    private HubConnection? _hubConnection;
    private string? _name;
    private short _stars;
    private short _coins;
    private Ranking? _ranking;
    private SpaceColor? _currentSpace;
    private ICharacter? _character;
    private IStatus? _status;
    private IItem?[] _items = [];
    private BonusStar[] _bonusStars = [];

    protected override async Task OnInitializedAsync() {
        if (Port is < 1 or > 4) {
            Navigation.NavigateTo("/Error");
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"/hub/player"))
            .WithAutomaticReconnect()
            .Build();
        
        _hubConnection.On<byte, string>("SetName", (player, name) => {
            if (player != Port) return;
            _name = name;
            InvokeAsync(StateHasChanged);
        });
        
        _hubConnection.On<byte, short>("ReceiveStarCount", (player, count) => {
            if (player != Port) return;
            _stars = count;
            InvokeAsync(StateHasChanged);
        });
        
        _hubConnection.On<byte, short>("ReceiveCoinCount", (player, count) => {
            if (player != Port) return;
            _coins = count;
            InvokeAsync(StateHasChanged);
        });
        
        _hubConnection.On<byte, Ranking>("ReceiveRank", (player, ranking) => {
            if (player != Port) return;
            _ranking = ranking;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<byte, SpaceColor?>("ReceiveSpace", (player, color) => {
            if (player != Port) return;
            _currentSpace = color;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<byte, ICharacter>("ReceiveCharacter", (player, character) => {
            if (player != Port) return;
            _character = character;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<byte, IStatus?>("ReceiveStatus", (player, status) => {
            if (player != Port) return;
            _status = status;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<byte>("InitItems", (size) => {
            _items = new IItem[size];
        });

        _hubConnection.On<byte, IItem?, IItem?, IItem?>("ReceiveItems", (player, item1, item2, item3) => {
            if (player != Port) return;
            if (_items.Length > 0) {
                _items[0] = item1;
            }
            if (_items.Length > 1) {
            _items[1] = item2;
            }
            if (_items.Length > 2) {
            _items[2] = item3;
            }
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<BonusStar[]>("SetupBonusStars", (bonusStars) => {
            _bonusStars = bonusStars;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<byte, BonusStar>("UpdateBonusStar", (player, bonusStar) => {
            if (player != Port) return;
            var toUpdate = _bonusStars.Single(bs => bs.Name == bonusStar.Name);
            toUpdate.Count = bonusStar.Count;
            toUpdate.InLead = bonusStar.InLead;
        });

        await _hubConnection.StartAsync();
    }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() {
        if (_hubConnection is not null) {
            await _hubConnection.DisposeAsync();
        }
    }
}